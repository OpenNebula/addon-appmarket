#!/usr/bin/env ruby
# -------------------------------------------------------------------------- #
# Copyright 2002-2013, OpenNebula Project (OpenNebula.org), C12G Labs        #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION=ENV["ONE_LOCATION"]

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby"
    ETC_LOCATION = "/etc/one"
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby"
    ETC_LOCATION = ONE_LOCATION + "/etc"
end

$: << RUBY_LIB_LOCATION
$: << RUBY_LIB_LOCATION+"/oneapps/market"

require 'init'

##############################################################################
##############################################################################
#
# For new version
#   * update VERSION and VERSION_CODE in init.rb
#   * include the version_code in the UPGRADE_SCRIPTS array
#   * create a new module Version#{version_code}
#       * define VERSION and VERSION_CODE constants
#       * define the self.upgrade method
#
##############################################################################
##############################################################################

UPGRADE_SCRIPTS = [10980, 10985, 10990, 20000, 20001, 20002]

module Version10985
    VERSION = "1.9.85"
    VERSION_CODE = 10985

    def self.upgrade
        AppMarket::DB['appliances'].find().to_a.each { |app|
            original_app = app.dup

            if app['files'] && app['files'][0]
                app['os-id'] = app['files'][0]['os-id']
                app['os-release'] = app['files'][0]['os-release']
                app['os-arch'] = app['files'][0]['os-arch']
                app['hypervisor'] = app['files'][0]['hypervisor']
                app['format'] = app['files'][0]['format']
            end

            AppMarket::DB['appliances'].update({'_id' => app['_id']}, app)
        }
    end
end

module Version10980
    VERSION = "1.9.80"
    VERSION_CODE = 10980

    def self.upgrade
        AppMarket::DB['appliances'].find().to_a.each { |app|
            original_app = app.dup

            app['status'] = 'ready'
            if app['files'] && app['files'][0]
                app['os-id'] = app['files'][0]['os-id']
                app['os-release'] = app['files'][0]['os-release']
                app['os-arch'] = app['files'][0]['os-arch']
                app['hypervisor'] = app['files'][0]['hypervisor']
                app['format'] = app['files'][0]['format']

                app['files'].each_with_index {|file, index|
                    file['name'] = app['name'] + '_file' + index.to_s
                }
            end

            AppMarket::DB['appliances'].update({'_id' => app['_id']}, app)
        }
    end
end

module Version10990
    VERSION = "1.9.90"
    VERSION_CODE = 10990
    def self.upgrade
    end
end

module Version20000
    VERSION = "2.0.0"
    VERSION_CODE = 20000
    def self.upgrade
    end
end

module Version20001
    VERSION = "2.0.1"
    VERSION_CODE = 20001
    def self.upgrade
    end
end

module Version20002
    VERSION = "2.0.2"
    VERSION_CODE = 20002
    def self.upgrade
    end
end

def call_upgrade_script(script_name)
    puts "Applying [#{script_name}] upgrade"
    module_name = Object.const_get("Version"+script_name.to_s)
    module_name.upgrade

    AppMarket::DBVersioning::insert_db_version(
        module_name::VERSION,
        module_name::VERSION_CODE)
end

version_codes = AppMarket::DBVersioning::get_version_codes

UPGRADE_SCRIPTS.each {|script_name|
    if !version_codes.include?(script_name)
        call_upgrade_script(script_name)
    end
}

puts "The DB is already in the last version"

