#!/usr/bin/env ruby

#------------------------------------------------------------------------------#
# Copyright 2002-2014, OpenNebula Project (OpenNebula.org), OpenNebula Systems #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License"); you may      #
# not use this file except in compliance with the License. You may obtain      #
# a copy of the License at                                                     #
#                                                                              #
# http://www.apache.org/licenses/LICENSE-2.0                                   #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
#------------------------------------------------------------------------------#

ONE_LOCATION=ENV["ONE_LOCATION"]

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby"
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby"
end

$: << RUBY_LIB_LOCATION
$: << RUBY_LIB_LOCATION+"/oneapps/market"
$: << RUBY_LIB_LOCATION+"/cloud"
$: << RUBY_LIB_LOCATION+"/cli"

require 'appmarket_client'

require 'command_parser'
require 'cli_helper'

require 'rubygems'
require 'json'

USER_AGENT = "CLI"

#
# Options
#

DEFAULT_OPTIONS = [
    ENDPOINT = {
        :name => "server",
        :short => "-s url",
        :large => "--server url",
        :format => String,
        :description => "Marketplace endpoint"
    },
    USERNAME={
        :name => "username",
        :short => "-u name",
        :large => "--username name",
        :format => String,
        :description => "User name"
    },
    PASSWORD={
        :name => "password",
        :short => "-p pass",
        :large => "--password pass",
        :format => String,
        :description => "User password"
    }
]

JSON_FORMAT={
    :name => "json",
    :short => "-j",
    :large => "--json",
    :description => "Show in JSON format"
}

#
# Table
#

TABLE = CLIHelper::ShowTable.new(nil, self) do
    column :ID, "Appliance", :size=>25 do |d|
        d["_id"]["$oid"]
    end

    column :NAME, "Name", :size=>50 do |d|
        d["name"]
    end

    column :PUBLISHER, "Publisher", :size=>15 do |d|
        d["publisher"]
    end

    default :ID, :NAME, :PUBLISHER
end

#
# Commands
#

cmd=CommandParser::CmdParser.new(ARGV) do
    usage "`appmarket` <command> [<args>] [<options>]"
    version AppMarket::VERSION_TEXT

    set :option, DEFAULT_OPTIONS
    set :option, CommandParser::VERSION

    #
    # List
    #

    list_desc = <<-EOT.unindent
        List the available appliances in the Marketplace
    EOT

    command :list, list_desc, :options => JSON_FORMAT do
        client = AppMarket::Client.new(
                    options[:username],
                    options[:password],
                    options[:server],
                    USER_AGENT)

        response = client.get_appliances

        if AppMarket::is_error?(response)
            [response.code.to_i, response.to_s]
        else
            if options[:json]
                [0,response.body]
            else
                array_list = JSON.parse(response.body)
                TABLE.show(array_list['appliances'])
                0
            end
        end
    end

    #
    # Create
    #

    create_desc = <<-EOT.unindent
        Create a new appliance in the Marketplace

        Example:

            {
              "name": "t_app",
              "short_description": "t_short_des",
              "description": "This image is 8 Gb.\\r\\n  * **Disk device**:  `xvda`\\r\\n",
              "version": "1.0",
              "hypervisor": "KVM",
              "format": "raw",
              "os-arch": "t64",
                "opennebula_template": "{\r\n    \"CONTEXT\": {\r\n        \"NETWORK\": \"YES\",\r\n        \"SSH_PUBLIC_KEY\": \"$USER[SSH_PUBLIC_KEY]\"\r\n    },\r\n    \"CPU\": \"1\",\r\n    \"GRAPHICS\": {\r\n        \"LISTEN\": \"0.0.0.0\",\r\n        \"TYPE\": \"vnc\"\r\n    },\r\n    \"MEMORY\": \"768\",\r\n    \"OS\": {\r\n        \"ARCH\": \"x86_64\"\r\n    }\r\n}",
              "tags": [
                "t_tag",
                " t_tag2"
              ],
              "files": [
                {
                  "url": "http://testtesttest.com/test.bz",
                  "md5": "ttttttttttttt",
                  "sha1": "tttttttttttttt",
                  "size": "10737418240",
                  "compression": "bz2"
                }
              ]
            }
    EOT

    command :create, create_desc, :file do
        client = AppMarket::Client.new(
                    options[:username],
                    options[:password],
                    options[:server],
                    USER_AGENT)

        response = client.create_appliance(File.read(args[0]))

        if AppMarket::is_error?(response)
            [response.code.to_i, response.to_s]
        else
            [0, response.body]
        end
    end

    #
    # Show
    #

    show_desc = <<-EOT.unindent
        Show detailed information of a given appliance
    EOT

    command :show, show_desc, :id, :options => JSON_FORMAT do
        client = AppMarket::Client.new(
                    options[:username],
                    options[:password],
                    options[:server],
                    USER_AGENT)

        response = client.get_appliance(args[0])

        if AppMarket::is_error?(response)
            [response.code.to_i, response.to_s]
        else
            [0,response.body]
        end
    end

    #
    # Delete
    #

    delete_desc = <<-EOT.unindent
        Delete  a given appliance
    EOT

    command :delete, delete_desc, :id do
        client = AppMarket::Client.new(
                    options[:username],
                    options[:password],
                    options[:server],
                    USER_AGENT)

        response = client.delete_appliance(args[0])

        if AppMarket::is_error?(response)
            [response.code.to_i, response.to_s]
        else
            [0,response.body]
        end
    end

    #
    # Update
    #

    update_desc = <<-EOT.unindent
        Update an appliance of the Marketplace
    EOT

    command :update, update_desc, :id, :file do
        client = AppMarket::Client.new(
                    options[:username],
                    options[:password],
                    options[:server],
                    USER_AGENT)

        response = client.update_appliance(args[0],File.read(args[1]))

        if AppMarket::is_error?(response)
            [response.code.to_i, response.to_s]
        else
            [0, response.body]
        end
    end
end
