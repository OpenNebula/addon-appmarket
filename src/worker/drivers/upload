#!/usr/bin/env ruby

ONE_LOCATION = ENV["ONE_LOCATION"]

if !ONE_LOCATION
    LOG_LOCATION = "/var/log/one"
    ETC_LOCATION = "/etc/one"
    RUBY_LIB_LOCATION = "/usr/lib/one/ruby"
else
    LOG_LOCATION = ONE_LOCATION + "/var"
    ETC_LOCATION = ONE_LOCATION + "/etc"
    RUBY_LIB_LOCATION = ONE_LOCATION+"/lib/ruby"
end

CONFIGURATION_FILE   = ETC_LOCATION + "/appconverter-worker.conf"

$: << RUBY_LIB_LOCATION + '/appconverter'
$: << RUBY_LIB_LOCATION + '/appconverter/lib'

################################################################################
# Libraries
################################################################################

require 'appmarket_client'
require 'appliance_handler'

require 'rubygems'
require 'json'
require 'base64'
require 'yaml'
require 'open4'
require 'digest/md5'
require 'digest/sha1'

require 'pp'

################################################################################
# Configuration
################################################################################

begin
    CONF = YAML.load_file(CONFIGURATION_FILE)
rescue Exception => e
    STDERR.puts "Error parsing config file #{CONFIGURATION_FILE}: #{e.message}"
    exit 1
end

################################################################################
# Helper Methods
################################################################################

def fail(error)
    STDERR.puts "Error: #{error}."
    exit 1
end

def ensure_value(value, error_msg)
    fail(error_msg) if value.nil? or value.empty?
end

################################################################################
# Main
################################################################################

# Callback URL
callback_url = ARGV[0]

username = CONF[:username]
password = CONF[:password]
url      = CONF[:appmarket_url]

client = AppMarket::Client.new(username, password, url)

# Job meta-data
begin
    job_json = JSON.parse(Base64::decode64(ARGV[1]))
rescue
    STDERR.puts("Invalid job.")
    exit 1
end

source      = job_json["appliance"]["source"]
source_type = job_json["appliance"]["source_type"]

ensure_value(source,      "Attribute 'source' cannot be empty.")
ensure_value(source_type, "Attribute 'source_type' cannot be empty.")

begin
    case source_type
    when "ova" then klass = OVA
    else
        raise WorkerFile, "Unknown source_type: #{type}"
    end

    appliance = klass.new(job_json["appliance"])
    appliance.unpack
    appliance.register_files
    appliance.delete_temp_dir
rescue Exception => e
    error_payload = {"job"=>{"error_message" => "[#{e.class.to_s}] #{e.message}"}}
    client.callback(callback_url, "error", error_payload.to_json)
    exit 1
end

appliance_payload ={"appliance" => appliance.to_hash}
client.callback(callback_url, "done", appliance_payload.to_json)
